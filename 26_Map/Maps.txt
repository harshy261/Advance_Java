*******************************************************************************************************

                                            Explanation:

*******************************************************************************************************

In layman terms, a Map in Java is like a dictionary that stores key-value pairs. Imagine you have a dictionary where you can look up a word (the key) and find its definition (the value). Similarly, in programming, a Map allows you to store and retrieve data using unique keys. Each key maps to a specific value, and you can use the key to quickly find the corresponding value.


Key-Value Pairs: A Map stores data in key-value pairs, where each key is unique and maps to a specific value.

No Duplicate Keys: A Map does not allow duplicate keys. If you try to add a key that already exists, the old value will be replaced with the new value.

Common Implementations: The most common implementations of the Map interface are HashMap, LinkedHashMap, and TreeMap.


*******************************************************************************************************


Types of Maps :-

HashMap:

Description: Uses a hash table for storage. It does not guarantee any specific order of elements.

Example:
Map<String, Integer> students = new HashMap<>();
students.put("Navin", 56);
students.put("Harsh", 23);
students.put("Sushil", 67);
students.put("Kiran", 92);
students.put("Harsh", 45); // Replaces the old value for key "Harsh"


*******************************************************************************************************

LinkedHashMap:

Description: Maintains a linked list of the entries in the map, in the order in which they were inserted.

Example:
Map<String, Integer> students = new LinkedHashMap<>();
students.put("Navin", 56);
students.put("Harsh", 23);
students.put("Sushil", 67);
students.put("Kiran", 92);
students.put("Harsh", 45); // Replaces the old value for key "Harsh"


*******************************************************************************************************


TreeMap:

Description: Stores elements in a sorted order based on the natural ordering of the keys or a custom comparator.

Example:
Map<String, Integer> students = new TreeMap<>();
students.put("Navin", 56);
students.put("Harsh", 23);
students.put("Sushil", 67);
students.put("Kiran", 92);
students.put("Harsh", 45); // Replaces the old value for key "Harsh"



*******************************************************************************************************
*******************************************************************************************************


1. What is a Map in Java?
Answer: A Map in Java is a collection that stores key-value pairs, where each key is unique and maps to a specific value. It allows you to store and retrieve data using keys.


2. What are the common implementations of the Map interface?
Answer: The common implementations of the Map interface are HashMap, LinkedHashMap, and TreeMap.


3. What is the difference between a HashMap and a TreeMap?
Answer: A HashMap does not guarantee any specific order of elements, while a TreeMap stores elements in a sorted order based on the natural ordering of the keys or a custom comparator.


4. How do you add key-value pairs to a Map in Java?
Answer: You add key-value pairs to a Map using the put method. For example:
Map<String, Integer> students = new HashMap<>();
students.put("Navin", 56);
students.put("Harsh", 23);


5. What happens if you try to add a duplicate key to a Map?
Answer: If you try to add a duplicate key to a Map, the old value associated with the key will be replaced with the new value.


6. How do you retrieve a value from a Map using a key?
Answer: You retrieve a value from a Map using the get method and passing the key as an argument. For example:
int value = students.get("Navin");


7. How do you check if a key exists in a Map?
Answer: You check if a key exists in a Map using the containsKey method. For example:
boolean exists = students.containsKey("Navin");


8. How do you iterate over the key-value pairs in a Map?
Answer: You can iterate over the key-value pairs in a Map using a for-each loop. For example:
for (String key : students.keySet()) {
    System.out.println(key + ": " + students.get(key));
}


9. What is the difference between HashMap and Hashtable?
Answer: HashMap is not synchronized and allows null keys and values, while Hashtable is synchronized and does not allow null keys or values.


10. Is a Map synchronized in Java?
Answer: No, a Map is not synchronized by default. If you need a synchronized Map, you can use Collections.synchronizedMap(new HashMap<>());.


*******************************************************************************************************
*******************************************************************************************************