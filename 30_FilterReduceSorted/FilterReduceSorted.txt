*******************************************************************************************************

                                            Explanation:

*******************************************************************************************************

In layman terms, filter, reduce, and sorted are operations provided by the Stream API in Java that allow you to process collections of data in a functional and declarative way. Imagine you have a list of numbers, and you want to filter out the even numbers, sort them, and then reduce them to a single sum. These operations help you achieve that in a clear and concise manner.

Key Points
Filter
Purpose: To select elements from a stream that match a given condition.
Method: filter(Predicate<T> predicate)
Usage: Used to remove elements that do not satisfy the condition.
Example: Filtering even numbers from a list.


*******************************************************************************************************

Reduce
Purpose: To combine elements of a stream into a single result.
Method: reduce(T identity, BinaryOperator<T> accumulator)
Usage: Used to perform aggregation operations, such as summing or averaging.
Example: Summing up the elements of a list.
Sorted
Purpose: To sort the elements of a stream.
Method: sorted(), sorted(Comparator<T> comparator)
Usage: Used to arrange elements in a natural or custom order.
Example: Sorting a list of numbers in ascending order.


*******************************************************************************************************


Benefits of Using Filter, Reduce, and Sorted
Concise Code: Reduces the amount of boilerplate code needed for common operations on collections.
Readability: Makes the code more readable and easier to understand by chaining operations together.
Functional Programming: Encourages the use of functional programming concepts like lambda expressions and method references.
Common Use Cases
Filtering: Removing elements that do not match a given condition.
Mapping: Transforming elements into another form.
Sorting: Arranging elements in a specific order.
Reducing: Combining elements into a single result.




*******************************************************************************************************
*******************************************************************************************************


1. What is the filter method in the Stream API?
Answer: The filter method is an intermediate operation that returns a stream consisting of elements that match a given predicate. It is used to remove elements that do not satisfy the condition.


2. What is the reduce method in the Stream API?
Answer: The reduce method is a terminal operation that combines the elements of a stream into a single result using a given binary operator. It is used to perform aggregation operations, such as summing or averaging.


3. What is the sorted method in the Stream API?
Answer: The sorted method is an intermediate operation that returns a stream consisting of the elements of the stream, sorted according to their natural order or a custom comparator.


4. Provide an example of using the filter method to select even numbers from a list.
Answer:
List<Integer> nums = Arrays.asList(4, 5, 7, 3, 2, 6);
List<Integer> evenNums = nums.stream()
                             .filter(n -> n % 2 == 0)
                             .collect(Collectors.toList());
System.out.println("Filtered (Even Numbers): " + evenNums);


5. Provide an example of using the reduce method to sum up the elements of a list.
Answer:
List<Integer> nums = Arrays.asList(4, 5, 7, 3, 2, 6);
int sum = nums.stream()
              .reduce(0, (c, e) -> c + e);
System.out.println("Reduced (Sum): " + sum);


6. Provide an example of using the sorted method to sort a list of numbers in ascending order.
Answer:
List<Integer> nums = Arrays.asList(4, 5, 7, 3, 2, 6);
List<Integer> sortedNums = nums.stream()
                               .sorted()
                               .collect(Collectors.toList());
System.out.println("Sorted: " + sortedNums);


7. What is the purpose of the map method in the Stream API?
Answer: The map method is an intermediate operation that returns a stream consisting of the results of applying a given function to the elements of the stream. It is used to transform elements into another form.


8. How can you chain multiple operations in the Stream API?
Answer: You can chain multiple operations in the Stream API by calling them sequentially on the stream. For example:
int result = nums.stream()
                 .filter(n -> n % 2 == 0)
                 .map(n -> n * 2)
                 .sorted()
                 .reduce(0, (c, e) -> c + e);


9. What are the benefits of using the Stream API for processing collections?
Answer: The benefits of using the Stream API for processing collections include concise code, improved readability, and the ability to easily parallelize operations for better performance on multi-core processors.


10. Can you modify the elements of a collection using the Stream API?
Answer: No, the Stream API is designed for processing and transforming data, not for modifying the underlying collection. Streams are intended to be used in a functional programming style, where data is transformed and new collections are created rather than modifying existing ones.


*******************************************************************************************************
*******************************************************************************************************