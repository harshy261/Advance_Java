*******************************************************************************************************

                                            Explanation:

*******************************************************************************************************


Inner Class
An inner class is a class defined within another class. It has access to the members (fields and methods) of the outer class, even if they are private. Inner classes are used to logically group classes that are only used in one place, increasing encapsulation and readability.

Anonymous Inner Class --
An anonymous inner class is a class without a name that is declared and instantiated all at once. It is used when you need to override methods of a class or an interface without creating a separate named class.

Abstract Anonymous Class --
An abstract anonymous class is an anonymous inner class that extends an abstract class. It provides implementations for the abstract methods of the abstract class.

Summary --
Inner Class: A class defined within another class, used for logical grouping and encapsulation.
Anonymous Inner Class: A class without a name, used for quick implementation of methods, often for interfaces or abstract classes.
Abstract Anonymous Class: An anonymous inner class that extends an abstract class and provides implementations for its abstract methods.



*******************************************************************************************************


1. What is an inner class in Java?
Answer: An inner class is a class defined within another class. It has access to the members (fields and methods) of the outer class, even if they are private. Inner classes are used to logically group classes that are only used in one place, increasing encapsulation and readability.


2. What are the types of inner classes in Java?
Answer: The types of inner classes in Java are:
Member Inner Class
Static Nested Class
Local Inner Class
Anonymous Inner Class


3. What is an anonymous inner class?
Answer: An anonymous inner class is a class without a name that is declared and instantiated all at once. It is used when you need to override methods of a class or an interface without creating a separate named class.


4.When would you use an anonymous inner class?
Answer: You would use an anonymous inner class when you need to provide a quick implementation of an interface or an abstract class, typically for event handling or callback functions.


5.What is an abstract anonymous class?
Answer: An abstract anonymous class is an anonymous inner class that extends an abstract class. It provides implementations for the abstract methods of the abstract class.


6. Can an inner class access the private members of its outer class?
Answer: Yes, an inner class can access the private members (fields and methods) of its outer class.


7. What is the difference between a static nested class and a non-static inner class?
Answer: A static nested class is a static member of the outer class and does not have access to the instance variables and methods of the outer class. A non-static inner class, on the other hand, is associated with an instance of the outer class and can access its instance variables and methods.


8. How do you instantiate an inner class in Java?
Answer: To instantiate an inner class, you need an instance of the outer class. For example:
OuterClass outer = new OuterClass();
OuterClass.InnerClass inner = outer.new InnerClass();


9. How do you instantiate a static nested class in Java?
Answer: A static nested class can be instantiated without an instance of the outer class. For example:
OuterClass.StaticNestedClass nested = new OuterClass.StaticNestedClass();


10. Can an anonymous inner class implement multiple interfaces?
Answer: No, an anonymous inner class can only implement one interface or extend one class at a time.


11. Provide an example of an anonymous inner class implementing an interface.
Answer:
interface Greeting {
    void sayHello();
}

public class Main {
    public static void main(String[] args) {
        Greeting greeting = new Greeting() {
            @Override
            public void sayHello() {
                System.out.println("Hello, World!");
            }
        };
        greeting.sayHello(); // Output: Hello, World!
    }
}


12. Provide an example of an abstract anonymous class.
Answer:
abstract class Animal {
    abstract void makeSound();
}

public class Main {
    public static void main(String[] args) {
        Animal dog = new Animal() {
            @Override
            void makeSound() {
                System.out.println("Bark");
            }
        };
        dog.makeSound(); // Output: Bark
    }
}



*******************************************************************************************************