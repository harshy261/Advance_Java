*******************************************************************************************************

                                            Explanation:

*******************************************************************************************************

In layman terms, BufferedReader in Java is like a helper that makes reading text from an input source (like a keyboard or a file) faster and more efficient. When you read data directly from an input source, it can be slow because it reads one character at a time. BufferedReader helps by reading a large chunk of data at once and storing it in a buffer (a temporary storage area). This way, when you need to read data, it can quickly provide it from the buffer instead of going back to the slow input source every time.


BufferedReader: A class in Java used to read text from an input source efficiently.

Buffer: A temporary storage area where data is stored before being processed.

InputStreamReader: A bridge from byte streams to character streams. It reads bytes and decodes them into characters using a specified charset.



Steps to Use BufferedReader :-
Create an InputStreamReader: This reads bytes from the input source and decodes them into characters.
InputStreamReader in = new InputStreamReader(System.in);

Create a BufferedReader: This wraps the InputStreamReader to read characters more efficiently.
BufferedReader bf = new BufferedReader(in);

Read a Line of Text: Use the readLine() method to read a line of text from the input source.
String input = bf.readLine();


Process the Input: Convert the input string to the desired type (e.g., integer) and process it.
int num = Integer.parseInt(input);


Benefits of Using BufferedReader :-

Efficiency: Reads large chunks of data at once, reducing the number of I/O operations and making the reading process faster.

Convenience: Provides methods like readLine() to read entire lines of text, making it easier to work with text input.

Comparison with Scanner :-

BufferedReader: More efficient for reading large amounts of text data. Requires more code to parse input (e.g., converting strings to integers).

Scanner: Easier to use for simple input parsing (e.g., reading integers, strings). Slightly less efficient for large amounts of text data.



*******************************************************************************************************
*******************************************************************************************************


1. What is BufferedReader in Java?
Answer: BufferedReader is a class in Java used to read text from an input source efficiently. It reads large chunks of data at once and stores them in a buffer, making the reading process faster compared to reading one character at a time.


2. Why is BufferedReader more efficient than other input methods?
Answer: BufferedReader is more efficient because it reads large chunks of data at once and stores them in a buffer. This reduces the number of I/O operations, which are typically slow, and allows for faster access to the data from the buffer.


3. How do you create a BufferedReader to read from the standard input (keyboard)?
Answer: You create a BufferedReader by wrapping an InputStreamReader around System.in. For example:
InputStreamReader in = new InputStreamReader(System.in);
BufferedReader bf = new BufferedReader(in);


4. What method do you use to read a line of text from a BufferedReader?
Answer: You use the readLine() method to read a line of text from a BufferedReader. This method blocks until a line of text is available. For example:
String input = bf.readLine();


5. How do you handle exceptions when using BufferedReader?
Answer: You handle exceptions by using a try-catch block. The readLine() method can throw an IOException, so you need to catch and handle it. 
For example:
try {
    String input = bf.readLine();
} catch (IOException e) {
    e.printStackTrace();
}

FileReader fileReader = new FileReader("path/to/file.txt");
BufferedReader bf = new BufferedReader(fileReader);


6. What is the purpose of the buffer in BufferedReader?
Answer: The buffer in BufferedReader serves as a temporary storage area for the data read from the input source. It allows for faster access to the data by reducing the number of I/O operations needed to read the data.


7. What is the difference between BufferedReader and Scanner?
Answer:
BufferedReader: More efficient for reading large amounts of text data. Requires more code to parse input (e.g., converting strings to integers).
Scanner: Easier to use for simple input parsing (e.g., reading integers, strings). Slightly less efficient for large amounts of text data.


8. Provide an example of reading an integer from the standard input using BufferedReader.
Answer:
import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;

public class BufferReadExample {
    public static void main(String[] args) throws IOException {
        InputStreamReader in = new InputStreamReader(System.in);
        BufferedReader bf = new BufferedReader(in);
        
        System.out.println("Enter a number:");
        String input = bf.readLine();
        int num = Integer.parseInt(input);
        
        System.out.println("You entered: " + num);
    }
}


9. What are some common methods provided by BufferedReader?
Answer:
read(): Reads a single character.
read(char[] cbuf, int off, int len): Reads characters into a portion of an array.
readLine(): Reads a line of text.
close(): Closes the stream and releases any system resources associated with it.



*******************************************************************************************************
*******************************************************************************************************