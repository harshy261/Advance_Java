*******************************************************************************************************

                                            Explanation:

*******************************************************************************************************


In layman terms, a Set in Java is like a collection of unique items, similar to a bag where you can put things but you cannot have duplicates. Imagine you have a bag where you can store different types of fruits, but you cannot have two apples in the bag at the same time. If you try to add another apple, it will be ignored because the bag already has one. This is how a Set works in Java.


Unique Elements: A Set does not allow duplicate elements. Each element in a Set must be unique.

No Order: The elements in a Set are not stored in any particular order.

Common Implementations: The most common implementations of the Set interface are HashSet, LinkedHashSet, and TreeSet.



*******************************************************************************************************
*******************************************************************************************************


Types of Sets :- 

HashSet:

Description: Uses a hash table for storage. It does not guarantee any specific order of elements.

Example:
Set<String> fruits = new HashSet<>();
fruits.add("Apple");
fruits.add("Banana");
fruits.add("Orange");
fruits.add("Apple"); // Duplicate, will be ignored


*******************************************************************************************************


LinkedHashSet:

Description: Maintains a linked list of the entries in the set, in the order in which they were inserted.
Example:
Set<String> fruits = new LinkedHashSet<>();
fruits.add("Apple");
fruits.add("Banana");
fruits.add("Orange");
fruits.add("Apple"); // Duplicate, will be ignored


*******************************************************************************************************


TreeSet:

Description: Stores elements in a sorted order. It uses a red-black tree structure.
Example:
Set<String> fruits = new TreeSet<>();
fruits.add("Apple");
fruits.add("Banana");
fruits.add("Orange");
fruits.add("Apple"); // Duplicate, will be ignored


*******************************************************************************************************
*******************************************************************************************************

1. What is a Set in Java?
Answer: A Set in Java is a collection that does not allow duplicate elements. Each element in a Set must be unique.


2. What are the common implementations of the Set interface?
Answer: The common implementations of the Set interface are HashSet, LinkedHashSet, and TreeSet.


3. What is the difference between a HashSet and a TreeSet?
Answer: A HashSet does not guarantee any specific order of elements, while a TreeSet stores elements in a sorted order.


4. How do you add elements to a Set in Java?
Answer: You add elements to a Set using the add method. For example:
Set<String> fruits = new HashSet<>();
fruits.add("Apple");
fruits.add("Banana");


5. What happens if you try to add a duplicate element to a Set?
Answer: If you try to add a duplicate element to a Set, it will be ignored, and the Set will remain unchanged.


6. How do you iterate over the elements of a Set?
Answer: You can iterate over the elements of a Set using a for-each loop or an iterator. For example:
for (String fruit : fruits) {
    System.out.println(fruit);
}


7. What is the difference between a Set and a List in Java?
Answer: A Set does not allow duplicate elements and does not maintain any specific order, while a List allows duplicate elements and maintains the order of elements.


8. How do you remove an element from a Set?
Answer: You remove an element from a Set using the remove method. For example:
fruits.remove("Apple");


9. What is the purpose of the contains method in a Set?
Answer: The contains method is used to check if a specific element is present in the Set. It returns true if the element is present, and false otherwise.


10. Is a Set synchronized in Java?
Answer: No, a Set is not synchronized by default. If you need a synchronized Set, you can use Collections.synchronizedSet(new HashSet<>());.


*******************************************************************************************************
*******************************************************************************************************